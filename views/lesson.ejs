<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= lesson.title %> | Tulong-Turo</title>
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&icon_names=add,attach_file,chat_bubble,chevron_left,chevron_right,close,home,menu,school,send&display=block"
    />
    <script src="/js/main.js" defer></script>
    <link rel="stylesheet" href="/css/lesson.css" />
  </head>
  <body>
    <!-- Header -->
    <%- include('partials/header', { subjectTitle: subjectTitle, subjectSlug:
    subjectSlug }) %>

    <!-- Sidebar -->
    <%- include('partials/sidenav.ejs') %>

    <main class="lesson-main">
      <div class="lesson-title-card">
        <!-- Need to fix linking of subjectSlug -->
        <a href="/lessons/<%- subjectSlug %>" class="back-link">
          <span class="material-symbols-outlined"> chevron_left </span>
          <span class="back-text">Back</span>
        </a>
        <div class="title-author-wrapper">
          <span><%= lesson.title %></span>
          <span class="lesson-author">
            <%= lesson.users.first_name %> <%= lesson.users.last_name %>
          </span>
        </div>
      </div>
      <div class="lesson-content">
        <!-- matik nicoconvert nung nasa ilalim yung markdown text to html content for rendering
      -->
        <%- content %>
      </div>
    </main>

    <button class="floating-chat-bubble" id="floating-chat-bubble">
      <p>Have questions? Ask <%= lesson.users.first_name %></p>
      <span class="material-symbols-outlined chat-bubble"> chat_bubble </span>
    </button>
    <div class="lesson__chat-wrapper" id="chat-wrapper">
      <div class="lesson__chat-header">
        <div class="lesson__chat-acc-wrapper">
          <!-- Account icon here -->
          <div class="lesson__chat-acc-icon"></div>

          <!-- Account name here-->
          <div class="lesson__chat-acc-name">Discuss with Others</div>
        </div>
        <button
          id="close-button"
          class="lesson__close-button material-symbols-outlined"
        >
          close
        </button>
      </div>

      <div class="lesson__chat-display"></div>

      <div class="lesson__chat-input-wrapper">
        <input
          type="text"
          class="lesson__chat-input"
          placeholder="Type a message..."
          id="chat-input"
          required
        />
        <button
          id="send-button"
          class="material-symbols-outlined lesson__send-button"
          onclick="startSend()"
        >
          send
        </button>
      </div>
    </div>

    <script>
      const display = document.querySelector(".lesson__chat-display");
      const roomId = "<%= lesson.id %>";
      const userId = "<%= user.userId %>";
      const chatInput = document.querySelector("#chat-input");
      let lastTimestamp = new Date(0);

      function prettyTime(timestamp) {
        const date = new Date(timestamp);

        const options = {
          hour: "numeric",
          minute: "2-digit",
          hour12: true,
          timeZone: "Asia/Manila",
        };

        const formattedTime = new Intl.DateTimeFormat("en-US", options).format(
          date
        );
        return formattedTime;
      }

      async function addMessage(name, content, timestamp, isSender) {
        const type = isSender ? "sender" : "receiver";
        const time = prettyTime(timestamp);
        const htmlString = `
          <div class="lesson__chat-message lesson__chat-message--${type}">
            <div class="lesson__chat-name lesson__chat-name--${type}">
              ${name}
            </div>
            <div class="lesson__chat-message-text lesson__chat-message-text--${type}">
              <p>${content}</p>
            </div>
            <div class="lesson__chat-message-time">${time}</div>
          </div>
        `;

        display.innerHTML += htmlString;
        display.scrollTop = display.scrollHeight;
      }

      async function getMessages() {
        try {
          const res = await fetch(
            `/api/chat/${roomId}?timestamp=${lastTimestamp.getTime()}`,
            {
              method: "GET",
              headers: {
                "Content-Type": "application/json",
              },
            }
          );

          const result = await res.json();

          if (res.ok) {
            result.forEach((data) => {
              const content = data.content;
              const timestamp = data.created_at;
              const name = data.users.first_name + " " + data.users.last_name;
              const isSender = data.users.id === userId;

              addMessage(name, content, timestamp, isSender);
              lastTimestamp = new Date(timestamp);
            });
          } else {
            alert(result.message || "Failed to get messages.");
          }
        } catch (err) {
          console.error("Failed to get message:", err);
          alert("An unexpected error occurred.");
        }
      }

      chatInput.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
          event.preventDefault();
          startSend();
        }
      });

      async function startSend() {
        const content = chatInput.value;

        // TK: add sending indicator
        await sendMessage(content);
        await getMessages();

        // TK: update chat
        chatInput.value = "";
      }

      async function sendMessage(content) {
        try {
          const res = await fetch(`/api/chat/${roomId}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              content: content,
            }),
          });

          const result = await res.json();

          if (res.ok) {
          } else {
            alert(result.message || "Failed to send message.");
          }
        } catch (err) {
          console.error("Failed to send message:", err);
          alert("An unexpected error occurred.");
        }
      }

      getMessages();
      setInterval(getMessages, 3000);
    </script>
  </body>
</html>
